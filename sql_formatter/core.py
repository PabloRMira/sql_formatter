# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['MAIN_STATEMENTS', 'capitalize_statements', 'remove_newlines', 'breakline_statement', 'OPERATORS',
           'lower_operators', 'validate_select', 'format_select', 'format_from']

# Cell
import re

# Cell
MAIN_STATEMENTS = [
    "create table",
    "create or replace table",
    "create view",
    "create or replace view",
    "select",
    "from",
    "left join",
    "inner join",
    "outer join",
    "right join",
    "on",
    "where",
    "group by"
]

# Cell
def capitalize_statements(s, statements):
    "Capitalize SQL statements `statements` in string `s`"
    for statement in statements:
        s = re.sub(rf"\b({statement})\b", statement.upper(), s, flags=re.I)
    return s

# Cell
def remove_newlines(s):
    "Remove newline characters"
    s = re.sub("\n", " ", s)
    return s

# Cell
def breakline_statement(s, statements):
    "Write a newline in `s` for all `statements`"
    for statement in statements:
        s = re.sub(rf"\s*({statement})\b", rf"\n{statement}", s, flags=re.I)
    return s

# Cell
OPERATORS = [
    "and",
    "or"
]

# Cell
def lower_operators(s, operators):
    "Lowercase `operators` in `s`"
    for operator in operators:
        s = re.sub(rf"\b{operator}\b", f"{operator}", s, flags=re.I)
    return s

# Cell
def validate_select(s):
    "Validate SELECT statement line `s`"
    exit_code = 0  # if no error then return 0
    # if there is a comma at the end of select line then add 1
    exit_code += 1 if re.match(r".*,\s*$", s) else exit_code
    return exit_code

# Cell
def format_select(s):
    "Format SELECT statement line `s`"
    s = re.sub(r"\s{2,}", " ", s)  # replace too many spaces
    s = re.sub(  # lowercase fields in select statement
        r"(select )(.*)",
        lambda match: match.group(1) + match.group(2).lower(),
        remove_newlines(s),
        flags=re.I
    )
    s = re.sub(r",\s*", ",\n       ", s)  # add newline after each comma
    return s

# Cell
def format_from(s):
    "Format FROM statement line `s`"
    s = re.sub(r"\s{2,}", " ", s)  # replace too many spaces
    s = re.sub(  # lowercase fields in from statement
        r"(from )(.*)",
        lambda match: match.group(1) + match.group(2).lower(),
        remove_newlines(s),
        flags=re.I
    )
    s = re.sub(
        r"(from )(.*)",
        r"\1   \2",
        s,
        flags=re.I
    )
    return s