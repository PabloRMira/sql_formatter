# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['assert_and_print', 'MAIN_STATEMENTS', 'CAPITAL_STATEMENTS', 'capitalize_statements',
           'remove_newlines_mspaces', 'breakline_statement', 'format_select', 'format_from', 'format_join',
           'add_whitespaces_between_symbols', 'format_on', 'format_where', 'format_statement_line', 'format_statements',
           'add_ending_semicolon', 'format_sql']

# Cell
import re

# Cell
def assert_and_print(s_in, s_expected):
    "Assert equality of `s_in` and `s_expected` and print the result of `s_in` if the assertion worked"
    assert s_in == s_expected
    print(s_in)
    return None

# Cell
MAIN_STATEMENTS = [
    "create table",
    "create or replace table",
    "create view",
    "create or replace view",
    "select",
    "from",
    "left join",
    "inner join",
    "outer join",
    "right join",
    "on",
    "where",
    "group by"
]

# Cell
CAPITAL_STATEMENTS = MAIN_STATEMENTS + ["as"]

# Cell
def capitalize_statements(s, statements):
    "Capitalize SQL statements `statements` in string `s`"
    for statement in statements:
        s = re.sub(rf"\b({statement})\b", statement.upper(), s, flags=re.I)
    return s

# Cell
def remove_newlines_mspaces(s):
    """Remove newline and too many spaces characters.
    Newline characters in SELECT statement with comments
    are replaced by special token [EOC] (end of comment)
    because otherwise we cannot format SELECT statements
    with comments properly
    """
    s = s.strip()  # strip sentence
    s = re.sub(r"\s{2,}", " ", s)  # remove too many whitespaces
    split_s = re.findall(r"(.*)(select .*)(from.*)", s, flags=re.I | re.DOTALL)[0]
    before_select = split_s[0]  # get lines before select
    select_lines = split_s[1]  # get select lines
    after_select = split_s[2]  # get lines after select
    select_lines = re.sub(r"(--.*)(\n)", r"\1[EOC]", select_lines)  # add special token for end of comment
    s = before_select + select_lines + after_select
    s = re.sub("\n", " ", s)  # remove newlines
    return s

# Cell
def breakline_statement(s, statements):
    "Write a newline in `s` for all `statements`"
    for statement in statements:
        s = re.sub(rf"\s*({statement})\b", rf"\n{statement}", s, flags=re.I)
    return s

# Cell
def format_select(s):
    "Format SELECT statement line `s`"
    if re.match(r".*,\s*$", s, flags=re.I):
        print("Correcting mistake: Comma at the end of SELECT statement")
        s = re.sub("(.*)(,+)(\s*)$", r"\1", s, flags=re.I)
    s = re.sub(r"(,)(\s*)([\w\d]+)", r"\1\n       \3", s)  # add newline after each comma (no comments) and indentation
    s = re.sub(r"\[EOC\]", "\n       ", s)  # replace [EOC] by newline
    return s

# Cell
def format_from(s):
    "Format FROM statement line `s`"
    s = re.sub(  # add indentation
        r"(from )(.*)",
        r"\1  \2",
        s,
        flags=re.I
    )
    return s

# Cell
def format_join(s):
    "Format JOIN statement line `s`"
    s = "    " + s  # add indentation
    return s

# Cell
def add_whitespaces_between_symbols(s):
    "Add whitespaces between symbols in line `s`"
    s = re.sub(r"([^\s])([=!<>]+)", r"\1 \2", s, flags=re.I)  # no space left
    s = re.sub(r"([=!<>]+)([^\s])", r"\1 \2", s, flags=re.I)  # no space right
    s = re.sub(r"([^\s])([=!<>]+)([^\s])", r"\1 \2 \3", s, flags=re.I)  # no space left and right
    return s

# Cell
def format_on(s):
    "Format ON statement line `s`"
    s = add_whitespaces_between_symbols(s)  # add whitespaces between symbols in join
    s = "        " + s  # add indentation
    return s

# Cell
def format_where(s):
    "Format WHERE statement line `s`"
    s = add_whitespaces_between_symbols(s)  # add whitespaces between symbols
    s = re.sub(r"(where )", r"\1 ", s, flags=re.I)  # add indentation afer WHERE
    s = re.sub(r"\sand", r"\n   and", s, flags=re.I)  # add new line before every 'and' and indentation
    s = re.sub(r"\sor", r"\n    or", s, flags=re.I)  # add new line before every 'or' and indentation
    return s

# Cell
def format_statement_line(s):
    "Format statement line `s`"
    statement_funcs = {
        "select": format_select,
        "from": format_from,
        "left join": format_join,
        "right join": format_join,
        "inner join": format_join,
        "outer join": format_join,
        "on": format_on,
        "where": format_where
    }
    for key, format_func in statement_funcs.items():
        if re.match(key, s, flags=re.I):
            s = format_func(s)
    return s

# Cell
def format_statements(s):
    "Format statements lines `s`"
    statement_lines = s.split("\n")
    formatted_lines = [
        format_statement_line(line) for line in statement_lines
    ]
    formatted_s = "\n".join(formatted_lines)
    return formatted_s

# Cell
def add_ending_semicolon(s):
    "Add ending semicolon for SQL query `s`"
    s = s.strip()
    if re.match(r".*[^;]$", s, flags=re.DOTALL):
        s = s + ";"
    return s

# Cell
def format_sql(s):
    "Format a SQL query `s`"
    s = s.lower()  # everything lowercased
    s = remove_newlines_mspaces(s)  # remove newlines and multiple spaces
    s = breakline_statement(s, MAIN_STATEMENTS)  # add breaklines for the main statements
    s = capitalize_statements(s, CAPITAL_STATEMENTS)  # capitalize capital statements
    s = format_statements(s)  # format statements
    s = add_ending_semicolon(s)  # add ending semicolon if not there yet
    return s